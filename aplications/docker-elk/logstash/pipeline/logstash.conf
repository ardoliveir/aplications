input {

  beats {
    port => 5044
  }

  syslog {
    type => "haproxy-access"
    port => 5045
  }

}

filter {

  if [type] == "haproxy-access" {

    grok { 
      match => { 
        "message" => "%{HAPROXYHTTPBASE}"
      } 
    }

    if "_grokparsefailure" in [tags] {

      grok {
        match => { "message" => "%{HAPROXYTCP}" }
        remove_tag => ["_grokparsefailure"]
      }

    } 
    
      geoip {
         source => "client_ip"
    }

    mutate {
      rename => {
        "logsource" => "sourcehost"
        "program" => "appname"
      }      
    }

    date {
      timezone => "America/Sao_Paulo"
      match => ["accept_date", "dd/MMM/yyyy:HH:mm:ss.SSS"]
    }

  } else {


    if [message] =~ /^{.*}$/ {
      # Message is json

      mutate {
        add_field => { "raw_message" => "%{message}" }
        add_tag => "_json_message"
      }      

      json { source => "message" }


    } else {
      # Message is not json
      grok { match => { "message" => "%{TIMESTAMP_ISO8601:timedate} %{GREEDYDATA}" } }

      # Try parse datetime from log
      if "_grokparsefailure" not in [tags] {

        date {
          match => ["timedate", "ISO8601"]
          remove_field => ["timedate"]
        }

      }

    }

    if "kubernetes" in [tags] {
      # Fix to send to syslog output
    
      if ![kubernetes] {

        mutate {
          add_field => {
            "sourcehost" => "%{host}"
            "appname"  => "kube-system"
          }
        }
    
      } else {
    
        mutate {
          rename => {
            "kubernetes[node][name]" => "sourcehost"
            "kubernetes[container][name]" => "appname"
          }
        }
    
      }

      if [appname] == "nginx-ingress-controller" {
        if [stream] == "stdout" {
          mutate {
            add_field => { "raw_message" => "%{message}" }
            add_tag => "_json_message"
          }

          grok {
            match => { "message" => "%{IPORHOST:remote_addr} - \[%{IPORHOST:$proxy_add_x_forwarded_for}\] - %{DATA:remote_user} \[%{HTTPDATE:time_local}\] \"%{WORD:method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:body_bytes_sent} \"%{DATA:http_referer}\" \"%{DATA:http_user_agent}\" %{NUMBER:request_length} %{NUMBER:request_time} \[%{DATA:proxy_upstream_name}\] %{DATA:upstream_addr} %{NUMBER:upstream_response_length} %{NUMBER:upstream_response_time} %{NUMBER:upstream_status}"}
            remove_field => "message"
          }

          mutate {
            add_field => { "message" => "%{method} %{url}" }
            add_tag => "_json_message"
          }

          date {
            match => [ "time_local", "dd/MMM/YYYY:H:m:s Z" ]
            remove_field => "time_local"
          }

          geoip {
            source => "remote_addr"
          }
        }
      }
  
    } else {
   
      mutate {
        add_field => { "sourcehost" => "%{beat[hostname]}"  }
      }
 
    }

  }

 if [appname] == "calico-node" {
     drop{ }
  }
  
}

output {

  elasticsearch{
    hosts => ["elasticsearch:9200"]
  }

}
